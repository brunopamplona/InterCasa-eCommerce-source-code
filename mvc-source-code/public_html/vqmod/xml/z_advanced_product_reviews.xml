<modification>

	<id>Advanced Product Reviews</id>
	<version>1.7</version>
	<vqmver>2.5.1</vqmver>
	<author>Adikon</author>

	<!-- for Opencart 1.5.1 - 1.5.6.x -->
	<file name="lojaadmin/view/template/common/header.tpl">
		<operation error="skip">
			<search position="before"><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a>]]></search>
			<add><![CDATA[
			  <li><a class="parent">Product Reviews</a>
                <ul>
				  <li><a href="<?php echo $product_reviews_review; ?>">Reviews</a></li>
				  <li><a href="<?php echo $product_reviews_rating; ?>">Manage ratings</a></li>
				  <li><a href="<?php echo $product_reviews_report; ?>">Abuse reports</a></li>
				  <li><a href="<?php echo $product_reviews_attribute; ?>">Pros and Cons</a></li>
				  <li><a href="<?php echo $product_reviews_optimize; ?>">Optimize tables</a></li>
				</ul>
			  </li>]]></add>
		</operation>

		<operation error="skip">
			<search position="replace"><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li>]]></search>
			<add><![CDATA[<?php if ($objConfig->get('product_reviews_status')) { ?><?php } else { ?><li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li><?php } ?>]]></add>
		</operation>
	</file>

	<file name="lojaadmin/controller/common/header.php">
		<operation error="skip">
			<search position="before"><![CDATA[$this->data['feed']]]></search>
			<add><![CDATA[
			$this->data['product_reviews_review'] = $this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_rating'] = $this->url->link('product_review/rating', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_report'] = $this->url->link('product_review/report', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_attribute'] = $this->url->link('product_review/attribute', 'token=' . $this->session->data['token'], 'SSL');
			$this->data['product_reviews_optimize'] = $this->url->link('product_review/review/optimize', 'token=' . $this->session->data['token'], 'SSL');

			if (isset($this->request->get['route']) && $this->config->get('product_reviews_status')) {
				if (((trim($this->request->get['route']) == 'catalog/review' || substr($this->request->get['route'], 0-strlen('catalog/review')) == 'catalog/review') && !stristr($this->request->get['route'], 'product_review'))) {
					$this->redirect($this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL'));
				}
			}

			$this->data['objConfig'] = $this->config;
			]]></add>
		</operation>
	</file>
	<!-- END for Opencart 1.5.1 - 1.5.6.x -->

	<!-- for Opencart 2.x - 2.2.x -->
	<file name="lojaadmin/view/template/common/menu.tpl" error="skip">
		<operation error="skip">
			<search position="before"><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li>]]></search>
			<add><![CDATA[
			  <li><a class="parent">Product Reviews</a>
                <ul>
				  <li><a href="<?php echo $product_reviews_review; ?>">Reviews</a></li>
				  <li><a href="<?php echo $product_reviews_rating; ?>">Manage ratings</a></li>
				  <li><a href="<?php echo $product_reviews_report; ?>">Abuse reports</a></li>
				  <li><a href="<?php echo $product_reviews_attribute; ?>">Pros and Cons</a></li>
				  <li><a href="<?php echo $product_reviews_optimize; ?>">Optimize tables</a></li>
				</ul>
			  </li>]]></add>
		</operation>

		<operation error="skip">
			<search position="replace"><![CDATA[<li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li>]]></search>
			<add><![CDATA[<?php if ($objConfig->get('product_reviews_status')) { ?><?php } else { ?><li><a href="<?php echo $review; ?>"><?php echo $text_review; ?></a></li><?php } ?>]]></add>
		</operation>
	</file>

	<file name="lojaadmin/controller/common/menu.php" error="skip">
		<operation error="skip">
			<search position="before"><![CDATA[$data['feed']]]></search>
			<add><![CDATA[
			$data['product_reviews_review'] = $this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL');
			$data['product_reviews_rating'] = $this->url->link('product_review/rating', 'token=' . $this->session->data['token'], 'SSL');
			$data['product_reviews_report'] = $this->url->link('product_review/report', 'token=' . $this->session->data['token'], 'SSL');
			$data['product_reviews_attribute'] = $this->url->link('product_review/attribute', 'token=' . $this->session->data['token'], 'SSL');
			$data['product_reviews_optimize'] = $this->url->link('product_review/review/optimize', 'token=' . $this->session->data['token'], 'SSL');

			if (isset($this->request->get['route']) && $this->config->get('product_reviews_status')) {
				if (((trim($this->request->get['route']) == 'catalog/review' || substr($this->request->get['route'], 0-strlen('catalog/review')) == 'catalog/review') && !stristr($this->request->get['route'], 'product_review'))) {
					$this->response->redirect($this->url->link('product_review/review', 'token=' . $this->session->data['token'], 'SSL'));
				}
			}

			$data['objConfig'] = $this->config;
			]]></add>
		</operation>
	</file>
	<!-- END for Opencart 2.x - 2.2.x -->

	<!-- for Opencart 2.3 and higher -->
	<file name="lojaadmin/controller/common/column_left.php" error="skip">
		<operation error="skip">
			<search position="replace"><![CDATA[if ($this->user->hasPermission('access', 'catalog/review')) {]]></search>
			<add><![CDATA[
			$product_reviews = array();

			if ($this->user->hasPermission('access', 'product_review/review')) {
				$product_reviews[] = array(
					'name'     => 'Reviews',
					'href'     => $this->url->link('product_review/review', 'token=' . $this->session->data['token'], true),
					'children' => array()
				);

				$product_reviews[] = array(
					'name'     => 'Manage ratings',
					'href'     => $this->url->link('product_review/rating', 'token=' . $this->session->data['token'], true),
					'children' => array()
				);

				$product_reviews[] = array(
					'name'     => 'Abuse reports',
					'href'     => $this->url->link('product_review/report', 'token=' . $this->session->data['token'], true),
					'children' => array()
				);

				$product_reviews[] = array(
					'name'     => 'Pros and Cons',
					'href'     => $this->url->link('product_review/attribute', 'token=' . $this->session->data['token'], true),
					'children' => array()
				);

				$product_reviews[] = array(
					'name'     => 'Optimize tables',
					'href'     => $this->url->link('product_review/review/optimize', 'token=' . $this->session->data['token'], true),
					'children' => array()
				);
			}

			if ($product_reviews) {
				$catalog[] = array(
					'name'	   => 'Product Reviews',
					'href'     => '',
					'children' => $product_reviews
				);
			}

			if (!$product_reviews && $this->user->hasPermission('access', 'catalog/review')) {]]></add>
		</operation>
	</file>
	<!-- END for Opencart 2.3 and higher -->

	<file name="lojaadmin/model/catalog/review.php">
		<operation>
			<search position="replace"><![CDATA[SELECT r.review_id]]></search>
			<add><![CDATA[SELECT r.review_id, r.store_id, r.vote_yes, r.vote_no, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "pr_attribute a WHERE a.type = '1' AND a.review_id = r.review_id) AS pros, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "pr_attribute a WHERE a.type = '0' AND a.review_id = r.review_id) AS cons, r.rating AS rating_avg, r.product_id]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[SELECT r.review_id, r.store_id, r.vote_yes, ]]></search>
			<add><![CDATA[
			if (version_compare(VERSION, '2.0') < 0) {
				if (!empty($data['filter_product'])) {
					$sql .= " AND pd.name LIKE '" . $this->db->escape($data['filter_product']) . "%'";
				}

				if (!empty($data['filter_author'])) {
					$sql .= " AND r.author LIKE '" . $this->db->escape($data['filter_author']) . "%'";
				}

				if (!empty($data['filter_date_added'])) {
					$sql .= " AND DATE(r.date_added) = DATE('" . $this->db->escape($data['filter_date_added']) . "')";
				}

				if (isset($data['filter_status']) && !is_null($data['filter_status'])) {
					$sql .= " AND r.status = '" . (int)$data['filter_status'] . "'";
				}
			}

			if (!empty($data['filter_average'])) {
				$sql .= " AND r.rating = '" . (int)$data['filter_average'] . "'";
			}

			if (isset($data['filter_store']) && !is_null($data['filter_store'])) {
				$sql .= " AND r.store_id = '" . (int)$data['filter_store'] . "'";
			}
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA['r.rating',]]></search>
			<add><![CDATA[
			'rating_avg',
			'pros',
			'cons',
			'r.vote_yes',
			'r.vote_no',
			'r.store_id',
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review]]></search>
			<add><![CDATA[
			$review_id = $this->db->getLastId();

			$this->load->model('catalog/product_review');
			$this->model_catalog_product_review->addReviewEvent($review_id, $data);
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "review]]></search>
			<add><![CDATA[
			$this->load->model('catalog/product_review');
			$this->model_catalog_product_review->editReviewEvent($review_id, $data);
			]]></add>
		</operation>

	</file>

	<file name="catalog/controller/common/seo_url.php,catalog/controller/startup/seo_url.php" error="skip">
		<!-- for Opencart 2.0.x -->
		<operation error="skip">
			<search position="before"><![CDATA[if (!isset($this->request->get['route'])) {]]></search>
			<add><![CDATA[
			if (($this->config->get('product_reviews_status') && $this->config->get('product_reviews_seo_keyword')) && $this->request->get['_route_'] == $this->config->get('product_reviews_seo_keyword')) {
				$this->request->get['route'] = 'product/allreviews';
			}
			]]></add>
		</operation>
		<!-- END for Opencart 2.0.x -->

		<!-- for Opencart 1.5.1 - 1.5.6.x -->
		<operation>
			<search position="before"><![CDATA[} elseif (isset($this->request->get['path'])) {]]></search>
			<add><![CDATA[
			} elseif (($this->config->get('product_reviews_status') && $this->config->get('product_reviews_seo_keyword')) && $this->request->get['_route_'] == $this->config->get('product_reviews_seo_keyword')) {
				$this->request->get['route'] = 'product/allreviews';
			]]></add>
		</operation>
		<!-- END for Opencart 1.5.1 - 1.5.6.x -->

		<operation>
			<search position="before"><![CDATA[} elseif ($key == 'path') {]]></search>
			<add><![CDATA[
			} elseif (isset($data['route']) && $data['route'] == 'product/allreviews' && $key != 'review_id' && $key != 'page' && $key != 'sort' && $key != 'limit' && $key != 'order') {
				if ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_seo_keyword')) {
					$url .=  '/' . $this->config->get('product_reviews_seo_keyword');
				}
			]]></add>
		</operation>
	</file>

	<file name="catalog/language/*/product/product.php">
		<operation>
			<search position="before"><![CDATA[$_['text_reviews']]]></search>
			<add><![CDATA[
			$_['error_logged_guest_rate']   = 'You must be logged in to rate this product!';
			$_['error_logged_helpfull']     = 'You must be logged if you want to vote the review is helpfull!';
			$_['error_logged_report_abuse'] = 'You must be logged in to report abuse!';
			$_['error_report_abuse']        = 'Please choose title the report!';
			$_['error_def_report_abuse']    = 'Please give a reason the report!';
			$_['error_already_helpfull']    = 'You have already voted!';
			$_['error_helpfull']            = 'The vote was not counted. Please try again later!';
			$_['error_pros_cons_limit']     = 'Pros and cons must have between %s and %s characters!';
			$_['error_purchase_product']    = 'To write a review, you must first buy this product!';
			$_['error_already_review_product'] = 'Already you wrote a review for this product!';
			$_['error_review_title']        = 'Review Title must be between 3 and 40 characters!';
			$_['entry_review_title']        = 'Review title';
			$_['entry_add_pros']            = 'Add pros';
			$_['entry_add_cons']            = 'Add cons';
			$_['entry_review_image']        = 'Add the image to the presentation (max %s):';
			$_['entry_recommend_product']   = 'I would recommend this product to a friend?';
			$_['text_reply']                = 'Reply by';
			$_['text_pros']                 = 'Pros';
			$_['text_cons']                 = 'Cons';
			$_['text_on']                   = 'on';
			$_['text_yes']                  = 'Yes';
			$_['text_no']                   = 'No';
			$_['text_average_review']       = 'Total:';
			$_['text_product_review']       = 'Reviews about %s';
			$_['text_general_avarage']      = 'Average rating:';
			$_['text_count_recommend_product'] = '<b>%s of %s (%s)</b> reviewers would<br />recommend this product to a friend.';
			$_['text_general_count_mark']   = '<b>Total reviews:</b> %s<br />Write your own review on this product.';
			$_['text_report_abuse']         = 'Report abuse';
			$_['text_report_it']            = 'Report it';
			$_['text_other_reason']         = 'Other (write below)';
			$_['text_please_wait']          = 'Please wait!';
			$_['text_helpfull_percentage']  = 'Was this review is helpful? <button class="vote_yes" data-vote="1" data-review-id="%s">Yes</button><button class="vote_no" data-vote="0" data-review-id="%s">No</button> %s found this review helpful.';
			$_['text_helpfull_numerically'] = 'Was this review is helpful? <button class="vote_yes" data-vote="1" data-review-id="%s">Yes</button><button class="vote_no" data-vote="0" data-review-id="%s">No</button> %s of %s people found this review helpful.';
			$_['text_share_title']          = '%s review of %s';
			$_['text_success_helpfull_percentage_yes']  = 'In your opinion is useful. %s found this review helpful.';
			$_['text_success_helpfull_percentage_no']   = 'In your opinion is useless. %s found this review helpful.';
			$_['text_success_helpfull_numerically_yes'] = 'In your opinion is useful. %s of %s found this review helpful.';
			$_['text_success_helpfull_numerically_no']  = 'In your opinion is useless. %s of %s found this review helpful.';
			$_['text_report_abuse_success'] = 'Your report has been successfully sent. Thank you.';
			$_['text_sort']                 = 'Sort by:';
			$_['text_default']              = 'Default';
			$_['text_rating_desc']          = 'Rating (highest)';
			$_['text_rating_asc']           = 'Rating (lowest)';
			$_['text_helpfull_desc']        = 'Helpfull (highest)';
			$_['text_helpfull_asc']         = 'Helpfull (lowest)';
			$_['text_date_added_desc']      = 'Date (new)';
			$_['text_date_added_asc']       = 'Date (old)';
			$_['button_write_review']       = 'Write a review';
			$_['error_filename']            = 'Filename must be between 3 and 64 characters!';
			$_['error_filetype']            = 'Invalid file type!';
			$_['error_upload']              = 'Upload required!';
			$_['text_upload']               = 'Your file was successfully uploaded!';
			]]></add>
		</operation>
	</file>

	<file name="catalog/controller/product/product.php">
		<operation>
			<search position="after" index="1"><![CDATA[if ($product_info) {]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_language_status')) {
				$this->load->model('catalog/review');

				$product_info['reviews'] = $this->model_catalog_review->getTotalReviewsByProductId($product_info['product_id'], $this->config->get('config_language_id'));

				if (!$product_info['reviews']) {
					$product_info['reviews'] = $this->model_catalog_review->getTotalReviewsByProductId($product_info['product_id'], false);
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if ($product_info['minimum']) {]]></search>
			<add><![CDATA[
			$data['objConfig'] = $this->config;
			$data['objCustomer'] = $this->customer;
			$data['objRequest'] = $this->request;

			if ($this->config->get('product_reviews_status')) {
				$this->document->addScript('catalog/view/javascript/jRating-master/jquery/jRating.jquery.js');
				$this->document->addStyle('catalog/view/javascript/jRating-master/jquery/jRating.jquery.css');

				$data['entry_add_pros'] = $this->language->get('entry_add_pros');
				$data['entry_add_cons'] = $this->language->get('entry_add_cons');
				$data['entry_review_image'] = sprintf($this->language->get('entry_review_image'), $this->config->get('product_reviews_image_limit'));
				$data['entry_review_title'] = $this->language->get('entry_review_title');
				$data['entry_recommend_product'] = $this->language->get('entry_recommend_product');
				$data['text_product_review'] = sprintf($this->language->get('text_product_review'), $product_info['name']);
				$data['text_general_avarage'] = $this->language->get('text_general_avarage');

				if ($this->config->get('product_reviews_recommend_status')) {
					$recomend_info = $this->model_catalog_review->getRecommendProductId($product_info['product_id']);

					$recommend_yes = (int)$recomend_info['yes'];
					$recommend_total = (int)$recomend_info['total'];
					$recommend_percent = ($recommend_total > 0) ? round(($recommend_yes / $recommend_total) * 100) : 0;
				} else {
					$recommend_yes = 0;
					$recommend_total = 0;
					$recommend_percent = 0;
				}

				$data['text_count_recommend_product'] = sprintf($this->language->get('text_count_recommend_product'), $recommend_yes, $recommend_total, $recommend_percent . '%');
				$data['recommend_total'] = $recommend_total;
				$data['text_general_count_mark'] = sprintf($this->language->get('text_general_count_mark'), $product_info['reviews']);
				$data['text_please_wait'] = $this->language->get('text_please_wait');
				$data['text_report_abuse'] = $this->language->get('text_report_abuse');
				$data['text_other_reason'] = $this->language->get('text_other_reason');
				$data['text_sort'] = $this->language->get('text_sort');
				$data['text_yes'] = $this->language->get('text_yes');
				$data['text_no'] = $this->language->get('text_no');
				$data['error_logged_helpfull'] = $this->language->get('error_logged_helpfull');
				$data['error_logged_report_abuse'] = $this->language->get('error_logged_report_abuse');
				$data['button_write_review'] = $this->language->get('button_write_review');

				$data['href_report_abuse'] = $this->url->link('product/allreviews/reportabuse', '', 'SSL');

				$reasons = $this->model_catalog_review->getReasonsTitle();

				if ($reasons) {
					$data['reasons'] = $reasons;
				} else {
					$data['reasons'] = array();
				}

				$data['ratings'] = $this->model_catalog_review->getRatings();
				$data['total_ratings'] = $this->model_catalog_review->getRatingsByProductId($product_id);
				$data['predefined_pros'] = $this->model_catalog_review->getPredefinedProsCons(array('filter_type' => '1'));
				$data['predefined_cons'] = $this->model_catalog_review->getPredefinedProsCons(array('filter_type' => '0'));

				$data['product_review_sorts'] = array();

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_default'),
					'value' => 'r.date_added-DESC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_rating_desc'),
					'value' => 'rating-DESC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_rating_asc'),
					'value' => 'rating-ASC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_helpfull_desc'),
					'value' => 'vote-DESC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_helpfull_asc'),
					'value' => 'vote-ASC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_date_added_desc'),
					'value' => 'r.date_added-DESC'
				);

				$data['product_review_sorts'][] = array(
					'text'  => $this->language->get('text_date_added_asc'),
					'value' => 'r.date_added-ASC'
				);

				if (version_compare(VERSION, '2.0') < 0) {
					$this->data = array_merge($this->data, $data);
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$json['error'] = $this->language->get('error_rating');]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status')) {
				//$json['error'] = $this->language->get('error_rating');
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[if ((utf8_strlen($this->request->post['name']) < 3) || (utf8_strlen($this->request->post['name']) > 25)) {]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status')) {
				$this->load->model('catalog/review');

				if ($this->config->get('product_reviews_rating_guest') && !$this->customer->isLogged()) {
					$json['error'] = $this->language->get('error_logged_guest_rate');

					$this->response->setOutput(json_encode($json));

					return;
				}

				$empty = array_filter($this->request->post['rating']);

				if (empty($this->request->post['rating']) || (count($empty) != count($this->request->post['rating']))) {
					$json['error'] = $this->language->get('error_rating');
				}

				if ($this->config->get('product_reviews_captcha') && $this->customer->isLogged()) {
					if (isset($this->session->data['captcha'])) {
						$this->request->post['captcha'] = $this->session->data['captcha'];
					}
				}

				if ($this->config->get('product_reviews_purchase_status') && $this->customer->isLogged()) {
					if (!$this->model_catalog_review->productPurchasedByCustomer($this->request->get['product_id'], $this->customer->getId())) {
						$json['error'] = $this->language->get('error_purchase_product');
					}
				}

				if ($this->config->get('product_reviews_limit_product_status') && $this->customer->isLogged()) {
					if ($this->model_catalog_review->alreadyWrittenByCustomer($this->request->get['product_id'], $this->customer->getId())) {
						$json['error'] = $this->language->get('error_already_review_product');
					}
				}

				if ($this->config->get('product_reviews_review_title_status')) {
					$this->request->post['review_title'] = strip_tags($this->request->post['review_title']);

					if ((utf8_strlen($this->request->post['review_title']) < 3) || (utf8_strlen($this->request->post['review_title']) > 40)) {
						$json['error'] = $this->language->get('error_review_title');
					}
				}

				if ($this->config->get('product_reviews_pros_cons_character_limit_from') && $this->config->get('product_reviews_pros_cons_character_limit_to')) {
					$from = (int)$this->config->get('product_reviews_pros_cons_character_limit_from');
					$to = (int)$this->config->get('product_reviews_pros_cons_character_limit_to');

					if (isset($this->request->post['review_pros']) && $this->request->post['review_pros']) {
						foreach (array_filter($this->request->post['review_pros']) as $pros) {
							if (utf8_strlen($pros) < $from || utf8_strlen($pros) > $to) {
								$json['error'] = sprintf($this->language->get('error_pros_cons_limit'), $from, $to);

								break;
							}
						}
					}

					if (isset($this->request->post['review_cons']) && $this->request->post['review_cons']) {
						foreach (array_filter($this->request->post['review_cons']) as $cons) {
							if (utf8_strlen($cons) < $from || utf8_strlen($cons) > $to) {
								$json['error'] = sprintf($this->language->get('error_pros_cons_limit'), $from, $to);

								break;
							}
						}
					}
				}
			}
			]]></add>
		</operation>

		<!-- for Opencart 2.0.3.1 - 2.1.0.0 -->
		<operation error="skip">
			<search position="replace"><![CDATA[$json['error'] = $this->language->get('error_captcha');]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status') && ($this->config->get('product_reviews_captcha') && $this->customer->isLogged())) {
				//$json['error'] = $this->language->get('error_captcha');
			} else {
				$json['error'] = $this->language->get('error_captcha');
			}
			]]></add>
		</operation>
		<!-- END for Opencart 2.0.3.1 - 2.1.0.0 -->

		<!-- for Opencart 2.1.0.1 and higher -->
		<operation error="skip">
			<search position="replace"><![CDATA[$json['error'] = $captcha;]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status') && ($this->config->get('product_reviews_captcha') && $this->customer->isLogged())) {
				//$json['error'] = $captcha;
			} else {
				$json['error'] = $captcha;
			}
			]]></add>
		</operation>
		<!-- END for Opencart 2.1.0.1 and higher -->

		<operation>
			<search position="after"><![CDATA[public function review() {]]></search>
			<add><![CDATA[
			$data['objConfig'] = $this->config;

			$this->load->language('product/product');

			if (isset($this->request->get['sort'])) {
				$sort_data = explode('-', $this->request->get['sort']);

				if (isset($sort_data[1]) && preg_match('/asc|desc/i', $sort_data[1])) {
					$sort = $this->request->get['sort'];
				} else {
					$sort = 'r.date_added-DESC';
				}
			} else {
				$sort = 'r.date_added-DESC';
			}

			$data['text_pros'] = $this->language->get('text_pros');
			$data['text_cons'] = $this->language->get('text_cons');
			$data['text_reply'] = $this->language->get('text_reply');
			$data['text_on'] = $this->language->get('text_on');
			$data['text_average_review'] = $this->language->get('text_average_review');
			$data['text_report_it'] = $this->language->get('text_report_it');

			if (version_compare(VERSION, '2.0') < 0) {
				$this->data = array_merge($this->data, $data);
			}

			$this->load->model('tool/image');

			$language_id = ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_language_status')) ? (int)$this->config->get('config_language_id') : false;
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[data['reviews'][] = array(]]></search>
			<add><![CDATA[
			$pros = $this->model_catalog_review->getProsByReviewId($result['review_id']);
			$cons = $this->model_catalog_review->getConsByReviewId($result['review_id']);

			if ($result['vote_yes']) {
				$helpfull = round($result['vote_yes'] / ($result['vote_yes'] + $result['vote_no']) * 100);
			} else {
				$helpfull = '0';
			}

			$review_images = array();

			if ($this->config->get('product_reviews_image_status')) {
				foreach ($this->model_catalog_review->getReviewImages($result['review_id']) as $image) {
					if ($image['image'] && file_exists(DIR_IMAGE . 'product_review/review/' . $image['image'])) {
						$review_images[] = array(
							'thumb' => $this->model_tool_image->resize('product_review/review/' . $image['image'], $this->config->get('product_reviews_image_thumb_width'), $this->config->get('product_reviews_image_thumb_height')),
							'popup' => $this->model_tool_image->resize('product_review/review/' . $image['image'], $this->config->get('product_reviews_image_popup_width'), $this->config->get('product_reviews_image_popup_height'))
						);
					}
				}
			}

			$comment_images = array();

			if ($this->config->get('product_reviews_image_status')) {
				foreach ($this->model_catalog_review->getReviewCommentImages($result['review_id']) as $image) {
					if ($image['image'] && file_exists(DIR_IMAGE . 'product_review/review/' . $image['image'])) {
						$comment_images[] = array(
							'thumb' => $this->model_tool_image->resize('product_review/review/' . $image['image'], $this->config->get('product_reviews_image_thumb_width'), $this->config->get('product_reviews_image_thumb_height')),
							'popup' => $this->model_tool_image->resize('product_review/review/' . $image['image'], $this->config->get('product_reviews_image_popup_width'), $this->config->get('product_reviews_image_popup_height'))
						);
					}
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[data['reviews'][] = array(]]></search>
			<add><![CDATA[
			'review_id'          => $result['review_id'],
			'review_title'       => $result['title'],
			'images'             => $review_images,
			'comment_images'     => $comment_images,
			'comment'            => ($this->config->get('product_reviews_comment_status')) ? $result['comment'] : '',
			'comment_date_added' => date($this->language->get('date_format_short'), strtotime($result['comment_date_added'])),
			'product_pros'       => ($pros) ? $pros : array(),
			'product_cons'       => ($cons) ? $cons : array(),
			'ratings'            => $this->model_catalog_review->getRatingsByReviewId($result['review_id']),
			'share_url'          => $this->url->link('product/allreviews', 'review_id=' . (int)$result['review_id']),
			'share_title'        => str_replace('"', '', sprintf($this->language->get('text_share_title'), $result['author'], $result['name'])),
			'helpfulness'        => ($this->config->get('product_reviews_helpfulness_type') == 'numerically') ? sprintf($this->language->get('text_helpfull_numerically'), $result['review_id'], $result['review_id'], (int)$result['vote_yes'], ((int)$result['vote_yes'] + (int)$result['vote_no'])) : sprintf($this->language->get('text_helpfull_percentage'), $result['review_id'], $result['review_id'], $helpfull . '%'),
			]]></add>
		</operation>

		<operation error="skip">
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/review.tpl')) {]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status')) {
				if (version_compare(VERSION, '2.0') < 0) {
					if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/apr_review.tpl')) {
						$this->template = $this->config->get('config_template') . '/template/product/apr_review.tpl';
					} else {
						$this->template = 'default/template/product/apr_review.tpl';
					}

					$this->response->setOutput($this->render());
				} elseif (version_compare(VERSION, '2.2') < 0) {
					if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/apr_review.tpl')) {
						$this->response->setOutput($this->load->view($this->config->get('config_template') . '/template/product/apr_review.tpl', $data));
					} else {
						$this->response->setOutput($this->load->view('default/template/product/apr_review.tpl', $data));
					}
				}

				return;
			}
			]]></add>
		</operation>

		<operation error="skip">
			<search position="before"><![CDATA[$this->response->setOutput($this->load->view('product/review', $data));]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status')) {
				$this->response->setOutput($this->load->view('product/apr_review', $data));

				return;
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$this->model_catalog_review->getTotalReviewsByProductId($this->request->get['product_id']);]]></search>
			<add><![CDATA[$this->model_catalog_review->getTotalReviewsByProductId($this->request->get['product_id'], $language_id);]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * 5, 5);]]></search>
			<add><![CDATA[$limit = ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_limit')) ? (int)$this->config->get('product_reviews_limit') : 5;]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * 5, 5);]]></search>
			<add><![CDATA[$results = $this->model_catalog_review->getReviewsByProductId($this->request->get['product_id'], ($page - 1) * $limit, $limit, $language_id, $sort);]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[$this->model_catalog_review->getTotalReviewsByProductId($this->request->get['product_id'], $language_id);]]></search>
			<add><![CDATA[
			if (!$review_total) {
				$review_total = $this->model_catalog_review->getTotalReviewsByProductId($this->request->get['product_id'], false);
				$language_id = false;
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$pagination->limit = 5;]]></search>
			<add><![CDATA[$pagination->limit = $limit;]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$pagination->url = $this->url->link('product/product/review', 'product_id=' . $this->request->get['product_id'] . '&page={page}');]]></search>
			<add><![CDATA[$pagination->url = $this->url->link('product/product/review', 'product_id=' . $this->request->get['product_id'] . '&page={page}&sort=' . $sort);]]></add>
		</operation>
	</file>

	<file name="catalog/model/catalog/review.php">
		<!-- for Opencart 2.0.x -->
		<operation error="skip">
			<search position="replace"><![CDATA[$message .= sprintf($this->language->get('text_rating'), $data['rating']) . "\n";]]></search>
			<add><![CDATA[$message .= sprintf($this->language->get('text_rating'), ((isset($avg)) ? $avg : $data['rating'])) . "\n";]]></add>
		</operation>
		<!-- END for Opencart 2.0.x -->

		<operation>
			<search position="after"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "review]]></search>
			<add><![CDATA[
			if ($this->config->get('product_reviews_status') && is_array($data['rating'])) {
				$review_id = $this->db->getLastId();

				$_tmp_ratings = array();

				foreach ($data['rating'] as $key => $rating) {
					$rating = (int)$rating;

					if ($rating < 1 || $rating > 5) {
						$rating = 5;
					}

					$_tmp_ratings[$key] = $rating;

					$this->db->query("INSERT INTO " . DB_PREFIX . "pr_rating_review SET review_id = '" . (int)$review_id . "', rating_id = '" . (int)$key . "', rating = '" . (int)$rating . "'");
				}

				$this->request->post['rating'] = $_tmp_ratings;

				if ($this->config->get('product_reviews_predefined_pros_cons_status')) {
					if (isset($data['predefined_pros']) && $data['predefined_pros']) {
						foreach ($data['predefined_pros'] as $pros) {
							$pros = base64_decode($pros);

							if ($pros) {
								$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($pros) . "', type = '1', added_by = 'u', predefined = '1', review_id = '" . (int)$review_id . "', status = '1'");
							}
						}
					}

					if (isset($data['predefined_cons']) && $data['predefined_cons']) {
						foreach ($data['predefined_cons'] as $cons) {
							$cons = base64_decode($cons);

							if ($cons) {
								$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($cons) . "', type = '0', added_by = 'u', predefined = '1', review_id = '" . (int)$review_id . "', status = '1'");
							}
						}
					}
				}

				if (isset($data['review_pros'])) {
					foreach ($data['review_pros'] as $pros) {
						$pros = trim($pros);

						if (!empty($pros)) {
							$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($pros) . "', type = '1', review_id = '" . (int)$review_id . "', status = '1'");
						}
					}
				}

				if (isset($data['review_cons'])) {
					foreach ($data['review_cons'] as $cons) {
						$cons = trim($cons);

						if (!empty($cons)) {
							$this->db->query("INSERT INTO " . DB_PREFIX . "pr_attribute SET name = '" . $this->db->escape($cons) . "', type = '0', review_id = '" . (int)$review_id . "', status = '1'");
						}
					}
				}

				$avg = $data['rating'] = round(array_sum($this->request->post['rating']) / count($this->request->post['rating']));

				$this->db->query("UPDATE " . DB_PREFIX . "review SET rating = '" . $avg . "', store_id = '" . (int)$this->config->get('config_store_id') . "', title = '" . ((isset($data['review_title'])) ? $this->db->escape($data['review_title']) : '') . "', language_id = '" . (int)$this->config->get('config_language_id') . "', recommend = '" . ((isset($data['recommend'])) ? $this->db->escape($data['recommend']) : '') . "' WHERE review_id = '" . (int)$review_id . "'");

				if (isset($data['review_images'])) {
					$k = 0;

					foreach ($data['review_images'] as $image) {
						if ($k >= (int)$this->config->get('product_reviews_image_limit')) break;

						$this->db->query("INSERT INTO " . DB_PREFIX . "pr_review_image SET image = '" . $this->db->escape($image) . "', review_id = '" . (int)$review_id . "'");

						$k++;
					}
				}

				if ($this->config->get('product_reviews_autoapprove')) {
					if (($this->config->get('product_reviews_autoapprove') == 2) || ($this->config->get('product_reviews_autoapprove') == 1 && $this->customer->isLogged())) {
						if ($avg >= $this->config->get('product_reviews_autoapprove_rating')) {
							$this->db->query("UPDATE " . DB_PREFIX . "review SET status = '1' WHERE review_id = '" . (int)$review_id . "'");
						}
					}
				}

				if ($this->config->get('product_reviews_point_status') && $this->customer->isLogged()) {
					if ($this->config->get('product_reviews_reward_point')) {
						$description = $this->config->get('product_reviews_description_point');

						if (isset($description[$this->config->get('config_language_id')])) {
							$description = $description[$this->config->get('config_language_id')];
						} else {
							$description = 'Points for writing a review.';
						}

						$this->db->query("INSERT INTO " . DB_PREFIX . "customer_reward SET customer_id = '" . (int)$this->customer->getId() . "', order_id = '0', points = '" . (int)$this->config->get('product_reviews_reward_point') . "', description = '" . $this->db->escape($description) . "', date_added = NOW()");
					}
				}

				if ($this->config->get('product_reviews_notify_status') && $this->config->get('product_reviews_notify_email') && $this->config->get('product_reviews_notification')) {
					$this->load->model('catalog/product');

					$product_info = $this->model_catalog_product->getProduct($product_id);
					$product = '<a href="' . $this->url->link('product/product', 'product_id=' . $product_id) . '">' . $product_info['name'] . '</a>';

					$data['text'] = strip_tags(html_entity_decode($data['text'], ENT_QUOTES, 'UTF-8'));
					$message = str_replace(array('{product}', '{avg}', '{review}'), array($product, $avg, $data['text']), $this->config->get('product_reviews_notification'));

					if (version_compare(VERSION, '2.0') < 0) {
						$reviewMail = new Mail();
						$reviewMail->protocol = $this->config->get('config_mail_protocol');
						$reviewMail->parameter = $this->config->get('config_mail_parameter');
						$reviewMail->hostname = $this->config->get('config_smtp_host');
						$reviewMail->username = $this->config->get('config_smtp_username');
						$reviewMail->password = html_entity_decode($this->config->get('config_smtp_password'), ENT_QUOTES, 'UTF-8');
						$reviewMail->port = $this->config->get('config_smtp_port');
						$reviewMail->timeout = $this->config->get('config_smtp_timeout');
					} elseif (version_compare(VERSION, '2.0.2') < 0) {
						$reviewMail = new Mail($this->config->get('config_mail'));
					} else {
						$reviewMail = new Mail();
						$reviewMail->protocol = $this->config->get('config_mail_protocol');
						$reviewMail->parameter = $this->config->get('config_mail_parameter');
						$reviewMail->smtp_hostname = $this->config->get('config_mail_smtp_host') !== null ? $this->config->get('config_mail_smtp_host') : $this->config->get('config_mail_smtp_hostname');
						$reviewMail->smtp_username = $this->config->get('config_mail_smtp_username');
						$reviewMail->smtp_password = html_entity_decode($this->config->get('config_mail_smtp_password'), ENT_QUOTES, 'UTF-8');
						$reviewMail->smtp_port = $this->config->get('config_mail_smtp_port');
						$reviewMail->smtp_timeout = $this->config->get('config_mail_smtp_timeout');
					}

					$reviewMail->setTo($this->config->get('product_reviews_notify_email'));
					$reviewMail->setFrom($this->config->get('config_email'));
					$reviewMail->setSender($this->config->get('config_name'));
					$reviewMail->setSubject('New product review');
					$reviewMail->setHtml($message);
					$reviewMail->send();
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[public function addReview($product_id, $data) {]]></search>
			<add><![CDATA[
			public function productPurchasedByCustomer($product_id, $customer_id) {
				$query = $this->db->query("SELECT o.order_id FROM `" . DB_PREFIX . "order` o LEFT JOIN `" . DB_PREFIX . "order_product` op ON (o.order_id = op.order_id) WHERE op.product_id = '" . (int)$product_id . "' AND o.customer_id = '" . (int)$customer_id . "'");

				return ($query->row) ? true : false;
			}

			public function alreadyWrittenByCustomer($product_id, $customer_id) {
				$query = $this->db->query("SELECT review_id FROM `" . DB_PREFIX . "review` WHERE product_id = '" . (int)$product_id . "' AND customer_id = '" . (int)$customer_id . "'");

				return ($query->row) ? true : false;
			}

			public function getReviewCommentImages($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_comment_image WHERE review_id = '" . (int)$review_id . "' ORDER BY comment_image_id ASC");

				return $query->rows;
			}

			public function getReviewImages($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_review_image WHERE review_id = '" . (int)$review_id . "' ORDER BY review_image_id ASC");

				return $query->rows;
			}

			public function getRatings() {
				$sql = "SELECT r.*, rd.name FROM " . DB_PREFIX . "pr_rating r LEFT JOIN " . DB_PREFIX . "pr_rating_description rd ON (r.rating_id = rd.rating_id) LEFT JOIN " . DB_PREFIX . "pr_rating_to_store r2s ON (r.rating_id = r2s.rating_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND r2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND r.status = '1' GROUP BY r.rating_id ORDER BY r.sort_order ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getProsByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '1' AND status = '1' ORDER BY attribute_id ASC");

				return $query->rows;
			}

			public function getRatingsByProductId($product_id) {
				$sql = '';

				if ($this->config->get('product_reviews_multistore_status')) {
					$sql .= " AND rev.store_id = '" . (int)$this->config->get('config_store_id') . "'";
				}

				$sql = "SELECT SUM(rr.rating) as sum_rating, COUNT(rr.rating) as total, rd.name FROM " . DB_PREFIX . "review rev LEFT JOIN " . DB_PREFIX . "pr_rating_review rr ON (rev.review_id = rr.review_id) LEFT JOIN " . DB_PREFIX . "pr_rating r ON (rr.rating_id = r.rating_id) LEFT JOIN " . DB_PREFIX . "pr_rating_description rd ON (rr.rating_id = rd.rating_id) WHERE rev.status = '1' AND rev.product_id = '" . (int)$product_id . "' AND rd.language_id = '" . (int)$this->config->get('config_language_id') . "' " . $sql . " GROUP BY r.rating_id ORDER BY r.sort_order ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getPredefinedProsCons($data = array()) {
				$sql = "SELECT * FROM " . DB_PREFIX . "pr_attribute WHERE added_by = 'a' AND status = '1'";

				if (isset($data['filter_type']) && !is_null($data['filter_type'])) {
					$sql .= " AND type = '" . $this->db->escape($data['filter_type']) . "'";
				}

				$sql .= " ORDER BY name ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getConsByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "pr_attribute WHERE review_id = '" . (int)$review_id . "' AND type = '0' AND status = '1' ORDER BY attribute_id ASC");

				return $query->rows;
			}

			public function getRatingsByReviewId($review_id) {
				$sql = "SELECT rr.rating_id, rr.rating, rd.name FROM " . DB_PREFIX . "pr_rating_review rr LEFT JOIN " . DB_PREFIX . "pr_rating r ON (rr.rating_id = r.rating_id) LEFT JOIN " . DB_PREFIX . "pr_rating_description rd ON (rr.rating_id = rd.rating_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND rr.review_id = '" . (int)$review_id . "' ORDER BY r.sort_order ASC";

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getReviewByReviewId($review_id) {
				$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "review WHERE review_id = '" . (int)$review_id . "' AND status = '1'");

				return $query->row;
			}

			public function addVoteReview($product_id, $data = array()) {
				if ($data['vote'] == '1') {
					$this->db->query("UPDATE " . DB_PREFIX . "review SET vote_yes = vote_yes + 1 WHERE product_id = '" . (int)$product_id . "' AND review_id = '" . (int)$data['review_id'] . "'");
				} elseif ($data['vote'] == '0') {
					$this->db->query("UPDATE " . DB_PREFIX . "review SET vote_no = vote_no + 1 WHERE product_id = '" . (int)$product_id . "' AND review_id = '" . (int)$data['review_id'] . "'");
				}
			}

			public function addReportAbuse($review_id, $data = array()) {
				if ($data['reason_id'] > 0) {
					$reason_info = $this->getReasonByReasonId($data['reason_id']);

					$title = $reason_info['name'];
				} else {
					$title = $data['def'];
				}

				if ($this->customer->isLogged()) {
					$customer_id = $this->customer->getId();
					$reported = $this->customer->getFirstName() . ' ' . $this->customer->getLastName();
				} else {
					$customer_id = 0;
					$reported = '';
				}

				$this->db->query("INSERT INTO " . DB_PREFIX . "pr_report SET title = '" . $title . "', reported = '" . $this->db->escape($reported) . "', review_id = '" . (int)$review_id . "', customer_id = '" . (int)$customer_id . "', store_id = '" . (int)$this->config->get('config_store_id') . "', date_added = NOW()");
			}

			public function getReasonsTitle() {
				$query = $this->db->query("SELECT r.reason_id, rd.name FROM " . DB_PREFIX . "pr_reason r LEFT JOIN " . DB_PREFIX . "pr_reason_description rd ON (r.reason_id = rd.reason_id) LEFT JOIN " . DB_PREFIX . "pr_reason_to_store r2s ON (r.reason_id = r2s.reason_id) WHERE rd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND r2s.store_id = '" . (int)$this->config->get('config_store_id') . "' AND r.status = '1'");

				return $query->rows;
			}

			public function getReasonByReasonId($reason_id) {
				$query = $this->db->query("SELECT name FROM " . DB_PREFIX . "pr_reason_description WHERE language_id = '" . (int)$this->config->get('config_language_id') . "' AND reason_id = '" . (int)$reason_id . "'");

				return $query->row;
			}

			public function getRecommendProductId($product_id) {
				$sql = '';

				if ($this->config->get('product_reviews_multistore_status')) {
					$sql .= " AND store_id = '" . (int)$this->config->get('config_store_id') . "'";
				}

				$query = $this->db->query("SELECT COUNT(product_id) as yes, (SELECT COUNT(product_id) FROM " . DB_PREFIX . "review WHERE product_id = '" . (int)$product_id . "' AND status = '1' AND (recommend = 'y' OR recommend = 'n') " . $sql . ") as total FROM " . DB_PREFIX . "review WHERE product_id = '" . (int)$product_id . "' AND recommend = 'y' AND status = '1'" . $sql);

				return $query->row;
			}

			public function getAllReviews($data = array()) {
				$sql = "SELECT r.*, p.product_id, pd.name AS product, ROUND((r.vote_yes / (r.vote_no + r.vote_yes)) * 100) as vote FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE r.status = '1' AND p.status = '1' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";

				if ($this->config->get('product_reviews_multistore_status')) {
					$sql .= " AND r.store_id = '" . (int)$this->config->get('config_store_id') . "'";
				}

				if ($data['language_id']) {
					$sql .= " AND (r.language_id = '" . (int)$data['language_id'] . "' OR r.language_id = '0')";
				}

				$sql .= " GROUP BY r.review_id";

				$sort_data = array(
					'r.date_added',
					'rating',
					'vote'
				);

				if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
					if (isset($data['review_id']) && $data['review_id']) {
						$sql .= " ORDER BY r.review_id = '" . (int)$data['review_id'] . "' DESC, " . $data['sort'];
					} else {
						$sql .= " ORDER BY " . $data['sort'];
					}
				} elseif (isset($data['type']) && $data['type'] == 'random') {
					$sql .= " ORDER BY RAND()";
				} else {
					$sql .= " ORDER BY r.date_added";
				}

				if (isset($data['order']) && ($data['order'] == 'DESC')) {
					$sql .= " DESC";
				} else {
					$sql .= " ASC";
				}

				if (isset($data['start']) || isset($data['limit'])) {
					if ($data['start'] < 0) {
						$data['start'] = 0;
					}

					if ($data['limit'] < 1) {
						$data['limit'] = 20;
					}

					$sql .= " LIMIT " . (int)$data['start'] . "," . (int)$data['limit'];
				}

				$query = $this->db->query($sql);

				return $query->rows;
			}

			public function getTotalAllReviews($data = array()) {
				$sql = '';

				if ($this->config->get('product_reviews_multistore_status')) {
					$sql = " AND r.store_id = '" . (int)$this->config->get('config_store_id') . "'";
				}

				if ($data['language_id']) {
					$sql .= " AND (r.language_id = '" . (int)$data['language_id'] . "' OR r.language_id = '0')";
				}

				$query = $this->db->query("SELECT COUNT(r.review_id) AS total FROM " . DB_PREFIX . "review r LEFT JOIN " . DB_PREFIX . "product p ON (r.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE r.status = '1' AND p.status = '1' AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'" . $sql);

				if (isset($query->row['total'])) {
					return $query->row['total'];
				} else {
					return 0;
				}
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[$query = $this->db->query("SELECT r.review_id, r.author, r.rating]]></search>
			<add><![CDATA[$query = $this->db->query("SELECT r.review_id, r.title, r.author, r.vote_yes, r.vote_no, r.comment, r.comment_date_added, IFNULL((SELECT AVG(t.rating) as total FROM " . DB_PREFIX . "pr_rating_review t WHERE t.review_id = r.review_id), r.rating) as rating, ROUND((r.vote_yes / (r.vote_no + r.vote_yes)) * 100) as vote]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20) {]]></search>
			<add><![CDATA[
			$sql = "";

			if ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_multistore_status')) {
				$sql .= " AND r.store_id = '" . (int)$this->config->get('config_store_id') . "'";
			}

			if ($language_id) {
				$sql .= " AND (r.language_id = '" . (int)$language_id . "' OR r.language_id = '0')";
			}

			$sort = explode("-", $sort);

			$sort_data = array(
				'r.date_added',
				'rating',
				'vote'
			);

			if (isset($sort[1]) && in_array($sort[0], $sort_data)) {
				$sql .= " ORDER BY " . $sort[0] . ' ' . $sort[1];
			} else {
				$sql .= " ORDER BY r.date_added DESC";
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20) {]]></search>
			<add><![CDATA[public function getReviewsByProductId($product_id, $start = 0, $limit = 20, $language_id = '', $sort = 'r.date_added-DESC') {]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[ORDER BY r.date_added DESC LIMIT " . (int)$start . "," . (int)$limit);]]></search>
			<add><![CDATA[" . $sql . " LIMIT " . (int)$start . "," . (int)$limit);]]></add>
		</operation>

		<operation>
			<search position="after"><![CDATA[function getTotalReviewsByProductId($product_id) {]]></search>
			<add><![CDATA[
			$sql = "";

			if ($this->config->get('product_reviews_status') && $this->config->get('product_reviews_multistore_status')) {
				$sql .= " AND r.store_id = '" . (int)$this->config->get('config_store_id') . "'";
			}

			if ($language_id) {
				$sql .= " AND (r.language_id = '" . (int)$language_id . "' OR r.language_id = '0')";
			}
			]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[function getTotalReviewsByProductId($product_id) {]]></search>
			<add><![CDATA[function getTotalReviewsByProductId($product_id, $language_id = '') {]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[AND r.status = '1' AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'");]]></search>
			<add><![CDATA[AND r.status = '1' " . $sql . " AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "'");]]></add>
		</operation>
	</file>

	<file name="catalog/view/theme/*/template/product/product.tpl,catalog/view/theme/omf2/template/product/product_mobile.tpl" error="skip">
		<operation>
			<search position="before"><![CDATA[id="review"]]></search>
			<add><![CDATA[<?php if ($objConfig->get('product_reviews_status')) { ?>
			<?php if ($objConfig->get('product_reviews_summary_status')) { ?>
			<div class="product_review_summary">
				<div class="product_name"><?php echo $text_product_review; ?></div>
				<div class="left">
					<div class="general_avarage"><?php echo $text_general_avarage; ?> <img src="image/product_review/stars-<?php echo $objConfig->get('product_reviews_appearance_customer_rating'); ?>-<?php echo round($rating, 0); ?>.png" alt="<?php echo $reviews; ?>" /></div>
					<div class="count_mark"><?php echo $text_general_count_mark; ?></div>
					<a onClick="$('html, body').animate({ scrollTop: $('input[name=\'name\']').offset().top }, 2000);" class="button"><?php echo $button_write_review; ?></a>
					<?php if ($recommend_total && $objConfig->get('product_reviews_recommend_status')) { ?>
					<div class="count_recommend_product"><?php echo $text_count_recommend_product; ?></div>
					<?php } ?>
				</div>
				<div class="right">
					<?php if ($total_ratings) { ?>
					<div class="product_rating_list">
						<ul>
							<?php $sum_rating = 0; ?>
							<?php $sum_total = 0; ?>
							<?php foreach ($total_ratings as $product_rating) { ?>
							<?php $rating = $product_rating['sum_rating'] / $product_rating['total']; ?>
							<li><?php echo $product_rating['name']; ?><img src="image/product_review/stars-<?php echo $objConfig->get('product_reviews_appearance_customer_rating'); ?>-<?php echo round($rating, 0); ?>.png" alt="<?php echo round($rating, 0); ?>" /></li>
							<?php } ?>
						</ul>
					</div>
					<?php } ?>
				</div>
				<div style="clear: both;"></div>
			</div>
			<?php } ?>
			<?php if ($objConfig->get('product_reviews_sort_status')) { ?>
			<div class="product_review_sort"><b><?php echo $text_sort; ?></b>
				<select onchange="$('#review').fadeOut('slow'); $('#review').load('index.php?route=product/product/review&product_id=<?php echo $product_id; ?>&sort=' + this.value); $('#review').fadeIn('slow');">
					<?php foreach ($product_review_sorts as $sorts) { ?>
					<option value="<?php echo $sorts['value']; ?>"><?php echo $sorts['text']; ?></option>
					<?php } ?>
				</select>
			</div>
			<?php } ?>
			<?php } ?>]]></add>
		</operation>

		<!-- for Opencart 1.5.1 - 1.5.6.x -->
		<operation error="skip">
			<search position="before"><![CDATA[<b><?php echo $entry_name; ?></b><br />]]></search>
			<add><![CDATA[
			<?php if ($objConfig->get('product_reviews_status')) { ?>
			<?php if ($objConfig->get('product_reviews_review_title_status')) { ?>
			<b><?php echo $entry_review_title; ?></b><br />
			<input type="text" name="review_title" value="" class="form-control" /><br /><br />
			<?php } ?>
			<?php } ?>]]></add>
		</operation>
		<!-- END for Opencart 1.5.1 - 1.5.6.x -->

		<!-- for Opencart 2.0.x -->
		<operation error="skip">
			<search position="after"><![CDATA[<?php if ($review_guest) { ?>]]></search>
			<add><![CDATA[
			<?php if ($objConfig->get('product_reviews_status')) { ?>
			<?php if ($objConfig->get('product_reviews_review_title_status')) { ?>
			<div class="form-group required">
			  <div class="col-sm-12">
			    <label class="control-label" for="input-review-title"><?php echo $entry_review_title; ?></label>
			    <input type="text" name="review_title" value="" id="input-review-title" class="form-control" />
			  </div>
			</div>
			<?php } ?>
			<?php } ?>]]></add>
		</operation>
		<!-- END for Opencart 2.0.x -->

		<operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[<?php if ($objConfig->get('product_reviews_status')) {
			echo'<style>' . html_entity_decode($objConfig->get('product_reviews_form_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_list_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_pros_cons_list_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_rating_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_helpfulness_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_sort_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_total_rating_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_image_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_comment_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_summary_css'), ENT_QUOTES, 'UTF-8') . "\n" . html_entity_decode($objConfig->get('product_reviews_share_css'), ENT_QUOTES, 'UTF-8') . '</style>';
			} ?>]]></add>
		</operation>

		<!-- for journal 2 -->
		<operation error="skip">
			<search position="replace"><![CDATA[&rating=' + encodeURIComponent($('input[name=\'rating\']').val() ? $('input[name=\'rating\']').val() : '') + '&]]></search>
			<add><![CDATA[&<?php if ($objConfig->get('product_reviews_status')) { ?>' + $('input[name^=\'rating\']').serialize() + '&'<?php if ($objConfig->get('product_reviews_review_title_status')) { ?> + 'review_title=' + encodeURIComponent($('input[name=\'review_title\']').val()) + '&'<?php } ?><?php if ($objConfig->get('product_reviews_recommend_status')) { ?> + 'recommend=' + encodeURIComponent($('select[name=\'recommend\'] option:selected').val()) + '&'<?php } ?><?php if ($objConfig->get('product_reviews_predefined_pros_cons_status')) { ?> + $('input[name^=\'predefined_pros\']:checked').serialize() + '&' + $('input[name^=\'predefined_cons\']:checked').serialize() + '&'<?php } ?> + $('input[name^=\'review_pros\']').serialize() + '&' + $('input[name^=\'review_cons\']').serialize() + '&' + $('input[name^=\'review_images\']').serialize() + '<?php } else { ?>rating=' + encodeURIComponent($('input[name=\'rating\']').val() ? $('input[name=\'rating\']').val() : '') + '<?php } ?>&]]></add>
		</operation>
		<!-- END for journal 2 -->

		<!-- for Opencart 1.5.1 - 2.0.2.1 -->
		<operation error="skip">
			<search position="replace"><![CDATA[data: 'name=' + encodeURIComponent($('input[name=\'name\']').val()) + '&text=' + encodeURIComponent($('textarea[name=\'text\']').val()) + '&rating=' + encodeURIComponent($('input[name=\'rating\']:checked').val() ? $('input[name=\'rating\']:checked').val() : '') + '&captcha=' + encodeURIComponent($('input[name=\'captcha\']').val()),]]></search>
			<add><![CDATA[data: $("#form-review").serialize(),]]></add>
		</operation>
		<!-- END for Opencart 1.5.1 - 2.0.2.1 -->

		<operation>
			<search position="replace"><![CDATA[$('input[name=\'name\']').val('');]]></search>
			<add><![CDATA[
			<?php if ($objConfig->get('product_reviews_status')) { ?>
			$('input[name^=\'review_pros\']').each(function(index) {
				if (!$(this).is(':last-child')) {
					$(this).remove();
				}
			});

			$('input[name^=\'review_cons\']').each(function(index) {
				if (!$(this).is(':last-child')) {
					$(this).remove();
				}
			});

			$('input[name^=\'rating\']').each(function(index) {
				$(this).val('');
			});
			<?php } ?>
			]]></add>
		</operation>

		<operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[
			  <?php if ($objConfig->get('product_reviews_status')) { ?>
			  <?php if ($objConfig->get('product_reviews_report_abuse_status')) { ?>
			  <input type="hidden" name="r_id" value="" />
			  <?php if (version_compare(VERSION, '2.0') < 0) { ?>
			  <div id="dialog-report-abuse" title="<?php echo $text_report_abuse; ?>">
			    <p class="validateTips"></p>
				<?php foreach ($reasons as $reason) { ?>
			    <input type="radio" name="reason_id" value="<?php echo $reason['reason_id']; ?>" /> <?php echo $reason['name']; ?><br />
			    <?php } ?>
			    <input type="radio" name="reason_id" value="0" /> <?php echo $text_other_reason; ?><br /><input type="text" name="other" value="" class="ui-widget-content ui-corner-all" style="margin: 3px 0 0 25px;" />
			  </div>
			  <?php } else { ?>
			  <div class="modal fade" id="dialog-report-abuse" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
			    <div class="modal-dialog">
				  <div class="modal-content">
				    <div class="modal-header">
					  <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
					  <h4 class="modal-title" id="myModalLabel"><?php echo $text_report_abuse; ?></h4>
				    </div>
				    <div class="modal-body">
					  <p class="validateTips"></p>
					  <?php foreach ($reasons as $reason) { ?>
					  <input type="radio" name="reason_id" value="<?php echo $reason['reason_id']; ?>" /> <?php echo $reason['name']; ?><br />
					  <?php } ?>
					  <input type="radio" name="reason_id" value="0" /> <?php echo $text_other_reason; ?><br /><input type="text" name="other" value="" class="form-control" style="width: 200px; margin: 3px 0 0 25px;" />
				    </div>
				    <div class="modal-footer">
				      <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
				      <button type="button" class="btn btn-primary" id="button-reason-send"><?php echo $button_continue; ?></button>
				    </div>
			      </div>
			    </div>
			  </div>
			  <?php } ?>
			  <?php } ?>

			  <?php if ($objConfig->get('product_reviews_image_status')) { ?>
			  <?php if (version_compare(VERSION, '2.0') < 0) { ?>
			  <script type="text/javascript" src="catalog/view/javascript/jquery/ajaxupload.js"></script>
			  <?php } ?>

			  <?php } ?>
			  <script type="text/javascript"><!--
			  $(document).ready(function(){
			    <?php if ($objConfig->get('product_reviews_report_abuse_status')) { ?>
				$(document).delegate('a#report_abuse', 'click', function() {
				  <?php if ($objConfig->get('product_reviews_report_abuse_guest') && !$objCustomer->isLogged()) { ?>
				  alert('<?php echo $error_logged_report_abuse; ?>');
				  <?php } else { ?>
				  $('input[name="r_id"]').val($(this).attr("rel"));

				  <?php if (version_compare(VERSION, '2.0') < 0) { ?>
				  $("#dialog-report-abuse").dialog("open");
				  <?php } else { ?>
				  $("#dialog-report-abuse").modal('show');
				  <?php } ?>
				  <?php } ?>
				});

				<?php if (version_compare(VERSION, '2.0') < 0) { ?>
				 $("#dialog-report-abuse").dialog({
				  autoOpen: false,
				  height: 300,
				  width: 350,
				  modal: true,
				  buttons: {
				    "<?php echo $button_continue; ?>": function() {
					  $.ajax({
					    url: 'index.php?route=product/allreviews/reportabuse&review_id=' + $('input[name="r_id"]').val(),
						type: 'post',
						dataType: 'json',
						data: 'reason_id=' + encodeURIComponent($('input[name=\'reason_id\']:checked').val()) + '&def=' + encodeURIComponent($('input[name=\'other\']').val()),
						beforeSend: function() {
						  $(".validateTips").text("").removeClass("ui-state-highlight ui-state-error ui-state-success");
						},
						complete: function() { },
						success: function(data) {
						  if (data['error']) {
						    $(".validateTips").text(data['error']).addClass("ui-state-highlight ui-state-error").css('padding', '10px');
						  }

						  if (data['success']) {
							$(".validateTips").text(data['success']).addClass("ui-state-highlight ui-state-success").css('padding', '10px');

							$("#dialog-report-abuse").siblings('.ui-dialog-buttonpane').find('button:first').hide();
						  }
						}
					  });
				    },
				    Cancel: function() {
				      $(this).dialog("close");
				    }
				  },
				  close: function() {
					$(".validateTips").text("").removeClass("ui-state-highlight ui-state-error ui-state-success").css('padding', '0px');
					$("#dialog-report-abuse").siblings('.ui-dialog-buttonpane').find('button:first').show();
					$('input[name=\'other\']').val('');
				  }
				});
				<?php } else { ?>
				$(document).delegate('#button-reason-send', 'click', function() {
				  if ($('input[name=\'reason_id\']:checked').length <= 0) {
				    return;
				  }

				  $.ajax({
				    url: 'index.php?route=product/allreviews/reportabuse&review_id=' + $('input[name="r_id"]').val(),
				    type: 'post',
				    dataType: 'json',
				    data: 'reason_id=' + encodeURIComponent($('input[name=\'reason_id\']:checked').val()) + '&def=' + encodeURIComponent($('input[name=\'other\']').val()),
				    beforeSend: function() {
				      $(".validateTips").html("");
				    },
				    complete: function() { },
				    success: function(data) {
					  if (data['error']) {
					    $(".validateTips").html('<div class="alert alert-danger">' + data['error'] + '</div>').css('padding', '10px');
					  }

					  if (data['success']) {
					    $(".validateTips").html('<div class="alert alert-success">' + data['success'] + '</div>').css('padding', '10px');

					    $("#dialog-report-abuse").find('#button-reason-send').hide();
					  }
				    }
				  });
				});
				<?php } ?>
				<?php } ?>

				function isMobileDetect() {
					return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent||navigator.vendor||window.opera)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test((navigator.userAgent||navigator.vendor||window.opera).substr(0,4)))
				}

				$('.rating_star2').jRating({
					smallStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/small.png',
					mediumStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/medium.png',
					bigStarsPath: 'catalog/view/javascript/jRating-master/jquery/icons/stars.png',
					phpPath: '<?php echo HTTP_SERVER; ?>catalog/view/javascript/jRating-master/php/jRating.php',
					step: true,
					type: '<?php echo $objConfig->get('product_reviews_appearance_type'); ?>',
					length: 5,
					rateMax: 5,
					showRateInfo: false,
					canRateAgain: true,
					nbRates: 7,
					onClick : function(element, rate) {
						if (isMobileDetect()) {
							$('input[name="rating[' + $(element).attr('data-id') + ']"]').val(rate);
						} else {
							$('input[name="rating[' + $(element).parent('div').attr('data-id') + ']"]').val(rate);
						}
					},
					onTouchstart : function(element, rate) {
						if (isMobileDetect()) {
							$('input[name="rating[' + $(element).attr('data-id') + ']"]').val(rate);
						} else {
							$('input[name="rating[' + $(element).parent('div').attr('data-id') + ']"]').val(rate);
						}
					}
				});

				<?php if ($objConfig->get('product_reviews_helpfulness_status')) { ?>
				$(document).delegate('.product_review_vote button', 'click', function() {
					<?php if ($objConfig->get('product_reviews_helpfulness_guest') && !$objCustomer->isLogged()) { ?>
					alert('<?php echo $error_logged_helpfull; ?>');
					<?php } else { ?>
					var helpfull_box = $(this).parents('.product_review_helpfulness').find('span:first');
					var helpfull_box_copy = helpfull_box.html();

					$.ajax({
						url: 'index.php?route=product/allreviews/vote&product_id=<?php echo $objRequest->get['product_id']?>',
						type: 'post',
						dataType: 'json',
						data: 'vote=' + encodeURIComponent($(this).attr('data-vote')) + '&review_id=' + encodeURIComponent($(this).attr('data-review-id')),
						beforeSend: function() {
							<?php if (version_compare(VERSION, '2.0') < 0) { ?>
							helpfull_box.html('<img src="catalog/view/theme/default/image/loading.gif" alt="" /> <?php echo $text_please_wait; ?>');
							<?php } else { ?>
							helpfull_box.html('<i class="fa fa-spin fa-spinner"></i> <?php echo $text_please_wait; ?>');
							<?php } ?>
						},
						complete: function() { },
						success: function(data) {
							if (data['error']) {
								alert(data['error']);

								helpfull_box.html(helpfull_box_copy);
							}

							if (data['success']) {
								helpfull_box.html(data['success']);
							}
						}
					});
					<?php } ?>
				});
				<?php } ?>
			});

			var pros_cons_limit = '<?php echo (int)$objConfig->get('product_reviews_pros_cons_limit'); ?>';

			$('.pros_cons').on('keyup', 'input[name^="review_pros"], input[name^="review_cons"]', function() {
				name = $(this).attr('name').replace('[]', '');

				if (this.value != '') {
					if ($('input[name^="' + name + '"]:last').val() != '' && $('input[name^="' + name + '"]').length < pros_cons_limit) {
						$('input[name^="' + name + '"]:last').after('<input type="text" name="' + name + '[]" />');
					}
				} else {
					if (this.value == '' && $('input[name^="' + name + '"]').length > 1) {
						if (!$(this).is(':last-child')) {
							$(this).remove();
						}

						if ($('input[name^="' + name + '"]:last').val() != '') {
							$('input[name^="' + name + '"]:last').after('<input type="text" name="' + name + '[]" />');

							$('input[name^="' + name + '"]:last').focus();
						}
					}
				}
			});

			<?php if ($objConfig->get('product_reviews_image_status')) { ?>
			<?php if (version_compare(VERSION, '2.0') < 0) { ?>
			new AjaxUpload('#review_image', {
				action: 'index.php?route=product/allreviews/reviewimageupload',
				name: 'file',
				autoSubmit: true,
				responseType: 'json',
				onSubmit: function(file, extension) {
					$('#review_image').after('<img src="catalog/view/theme/default/image/loading.gif" class="loading" style="padding-left: 5px;" />');
					$('#review_image').attr('disabled', true);
				},
				onComplete: function(file, json) {
					$('#review_image').attr('disabled', false);

					$('.error').remove();

					if (json['success']) {
						alert(json['success']);

						$('#review_images').append('<div class="rimage"><img src="' + json['thumb'] + '" alt="" /><input type="hidden" name="review_images[]" value="' + json['file'] + '" /></div>');

						if ($('#review_images > div').length >= <?php echo (int)$objConfig->get('product_reviews_image_limit'); ?>) {
							$('#review_image').remove();
						}
					}

					if (json['error']) {
						$('#review_image').after('<span class="error">' + json['error'] + '</span>');
					}

					$('.loading').remove();	
				}
			});
			<?php } else { ?>
			$('#review_image').on('click', function() {
				var node = this;

				$('#form-upload').remove();

				$('body').prepend('<form enctype="multipart/form-data" id="form-upload" style="display: none;"><input type="file" name="file" /></form>');

				$('#form-upload input[name=\'file\']').trigger('click');

				timer = setInterval(function() {
					if ($('#form-upload input[name=\'file\']').val() != '') {
						clearInterval(timer);

						$.ajax({
							url: 'index.php?route=product/allreviews/reviewimageupload',
							type: 'post',
							dataType: 'json',
							data: new FormData($('#form-upload')[0]),
							cache: false,
							contentType: false,
							processData: false,
							beforeSend: function() {
								$(node).button('loading');
							},
							complete: function() {
								$(node).button('reset');
							},
							success: function(json) {
								$('.text-danger').remove();
					
								if (json['error']) {
									$(node).parent().find('input').after('<div class="text-danger">' + json['error'] + '</div>');
								}
					
								if (json['success']) {
									alert(json['success']);

									$('#review_images').append('<div class="rimage"><img src="' + json['thumb'] + '" alt="" /><input type="hidden" name="review_images[]" value="' + json['file'] + '" /></div>');

									if ($('#review_images > div').length >= <?php echo (int)$objConfig->get('product_reviews_image_limit'); ?>) {
										$(node).remove();
									}
								}
							},
							error: function(xhr, ajaxOptions, thrownError) {
								alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
							}
						});
					}
				}, 500);
			});
			<?php } ?>
			<?php } ?>
			//--></script>
			<?php } ?>
			]]></add>
		</operation>

		<operation error="skip">
			<search position="replace"><![CDATA[<?php echo $entry_bad]]></search>
			<add><![CDATA[<?php if ($objConfig->get('product_reviews_status')) {
				if ($ratings) {
					echo'<table class="product_rating">';
					foreach ($ratings as $rating) {
						echo'<tr><td>' . $rating['name'] . '</td><td><input type="hidden" name="rating[' . $rating['rating_id'] . ']" value="" /><div class="rating_star2" data-average="5" data-id="' . $rating['rating_id'] . '"></div></td></tr>';
					}
					echo'</table>';

					if ($objConfig->get('product_reviews_pros_status') || $objConfig->get('product_reviews_cons_status')) {
					echo'<table class="pros_cons">';
					echo'<tr>';

					if ($objConfig->get('product_reviews_pros_status') || $objConfig->get('product_reviews_predefined_pros_cons_status')) {
					echo'<td class="pros" style="width:50%!important;">' . $entry_add_pros . '</td>';
					}

					if ($objConfig->get('product_reviews_cons_status') || $objConfig->get('product_reviews_predefined_pros_cons_status')) {
					echo'<td class="cons">' . $entry_add_cons . '</td>';
					}

					echo'</tr>';
					echo'<tr>';

					echo'<td>';
					if ($predefined_pros && $objConfig->get('product_reviews_predefined_pros_cons_status')) {
						foreach ($predefined_pros as $pros) {
							echo'<div class="predefined_pros_cons"><input type="checkbox" name="predefined_pros[]" value="' . base64_encode($pros['name']) . '" /> ' . $pros['name'] . '</div>';
						}
					}

					if ($objConfig->get('product_reviews_pros_status')) {
					echo'<input type="text" name="review_pros[]" />';
					}
					echo'</td>';

					echo'<td>';
					if ($predefined_cons && $objConfig->get('product_reviews_predefined_pros_cons_status')) {
						foreach ($predefined_cons as $cons) {
							echo'<div class="predefined_pros_cons"><input type="checkbox" name="predefined_cons[]" value="' . base64_encode($cons['name']) . '" /> ' . $cons['name'] . '</div>';
						}
					}

					if ($objConfig->get('product_reviews_cons_status')) {
					echo'<input type="text" name="review_cons[]" />';
					}
					echo'</td>';

					echo'</tr>';
					echo'</table>';
					}

					if ($objConfig->get('product_reviews_image_status')) {
					echo'<div style="margin-top: 20px;">' . $entry_review_image . ' <span class="left-button-org"><span class="right-button-org"><input type="button" value="' . $button_upload . '" id="review_image" class="button"></span></span><div id="review_images"></div></div>';
					}

					if ($objConfig->get('product_reviews_recommend_status')) {
					echo'<div style="margin-top: 20px;">' . $entry_recommend_product . ' <select name="recommend" class="form-control"><option value="y">' . $text_yes . '</option><option value="n">' . $text_no . '</option></select></div>';
					}
				}
			} else { ?><?php echo $entry_bad]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[entry_good; ?>]]></search>
			<add><![CDATA[entry_good; ?></span><?php } ?>]]></add>
		</operation>
	</file>

</modification>